// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.3.21'
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {url 'https://maven.aliyun.com/repository/public'}
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.1'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"

        // jcenter
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
    }
}

allprojects {
    Properties properties = new Properties()
    File projectPropertiesFile = project.file("codeup_project.properties")
    if (projectPropertiesFile.exists()) {
        properties.load(projectPropertiesFile.newDataInputStream())
    }

    def NEXUS_USERNAME = properties.getProperty("NEXUS_USERNAME")
    def NEXUS_PASSWORD = properties.getProperty("NEXUS_PASSWORD")

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            credentials {
                username NEXUS_USERNAME
                password NEXUS_PASSWORD
            }
            url 'https://packages.aliyun.com/maven/repository/2017546-release-Dczwza/'
        }
        maven {
            credentials {
                username NEXUS_USERNAME
                password NEXUS_PASSWORD
            }
            url 'https://packages.aliyun.com/maven/repository/2017546-snapshot-lydKFe/'
        }
    }

    // jcenter配置
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }

    task lintCheck() {
        getAllTasks(true).each {
            def lintTasks = it.value.findAll { it.name.contains("lint") }
            lintTasks.each {
                it.enabled = false
            }
        }
    }

    ext {
        compile_sdk_version = 28
        build_tools_version = '28.0.3'
        min_sdk_version = 21
        target_sdk_version = 28
        support_library_version = '28.0.0'

        // demo版本号
        app_version_code = 116
        app_version_name = '1.1.6'

        // base库版本号
        base_version_code = 136
        base_version_name = '1.3.6'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
